{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"o0foam.","url":"https://o0foam.github.io"},"pages":[{"title":"o0foam的自我介绍","date":"2019-02-11T08:49:20.407Z","updated":"2019-02-11T08:49:20.407Z","comments":true,"path":"about/index.html","permalink":"https://o0foam.github.io/about/index.html","excerpt":"","text":"我小名-果汁，也可以叫我徐国志，喜欢打羽毛球、听歌、摄影~ 毕业信息2018年毕业于东莞理工学院城市学院，并荣获优秀毕业生等称号，专业是计算机科学与技术。 工作经历工作岗位：web前端工程师实习：2018年3月~6月———–广东大榕树信息科技有限公司转正：2018年6月至今———–广东大榕树信息科技有限公司 项目经历 Bsac100：一个通过蓝牙去控制风机的App，运用了vue 和mint-UI； 会议室智能控制APP:一个控制大屏与灯控开关的APP，运用了vue 、jQuery和mint-UI； 重构监控系统网页：运用了vue、layui组件和echarts图表等,兼容1376 x 768和1920 x 1080等分辨率。克服layui组件和vue绘制表格时不兼容的问题,成功展示表格页面及其表格的交互功能； 开发公司客户定制项目。 个人技能 熟悉vue 组件化开发，代码强迫症，喜欢写可维护的代码，熟悉ES6语法； 了解webpack（在学，在github里有demo），了解sass、echarts； 熟悉jQuery、mint-UI、layui组件等前端框架，有良好的编程习惯； 隐藏技能：PPT动画设计与制作,羽毛球。 我的日常我会在下班后的时间，关注并学习有关前端的知识，我会坚持每天运动，保持一个好的身材与精神状态。我会好好努力，好好工作，我要一个我想象不到的未来。 在校荣誉2014-2016学年度获2次“自律会工作积极分子”称号2015.5 获公寓文化创意PPT大赛系第一名、院二等奖2015-2016学年度在共青团工作中获得“优秀团干”称号2015-2016学年度荣获“优秀学生会干事”称号2015-2016学年度担任学生会干部期间带出了一个很棒的团队2015-2016学年度在共青团工作中获得“优秀团员”称号2018年6月荣获“优秀毕业生”称号 如何联系我：邮箱： 522653886@qq.com"}],"posts":[{"title":"ES6 语法整理","slug":"ES6 语法整理","date":"2019-03-28T14:28:54.000Z","updated":"2019-04-02T15:46:43.459Z","comments":true,"path":"2019/03/28/ES6 语法整理/","link":"","permalink":"https://o0foam.github.io/2019/03/28/ES6 语法整理/","excerpt":"","text":"const 与 let 变量：const 设置对象为常量，let设置的对象为变量。不能在同个作用域内多次 let 同个变量。 模板字符串：在 es6 之前，将字符串连接到一起一般是使用的方法是 + 或者 concat()，如12345const age = 18;const name = \"ming\";const isMe = \"my name is \" + name + \". I am \" + age + \" years old.\"console.log(isMe);// my name is ming. I am 18 years old. 利用模板字符串可以这样写12345const age = 18;const name = \"ming\";const isMe = `my name is $&#123;name&#125;. I am $&#123;age&#125; years old.`console.log(isMe);// my name is ming. I am 18 years old. 解构赋值：解构数组1234const arrNum = [10,20,30];const [a,b,c] = arrNum;console.log(a,b,c);// 10 20 30 []表示被解构的数组，a、b、c表示要将数组中的值存储在其中的变量，在解构数组时还可以忽略值，例如 const[a,,c] = arrNum ，忽略 b 坐标。 解构对象12345678const people = &#123; name: \"ming\", age: \"18\", happy: \"ball\"&#125;const &#123; name, age, happy &#125; = people;console.log(name, age, happy);// ming 18 ball 对象字面量简写法：1234567891011121314151617const name = \"ming\";const age = 18;const happy = \"ball\";const people = &#123; name, age, happy, eat()&#123; console.log(\"I can eat rice.\") &#125; // 相当于 // eat: function()&#123; // console.log(\"I can eat rice.\") // &#125;&#125;;console.log(people);// &#123;name: \"ming\", age: 18, happy: \"ball\"， eat: f&#125; for…of 循环先来看看 for 循环：1234const Arr = [ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" ];for (let i = 0; i &lt; Arr.length; i++)&#123; console.log(Arr[i])&#125;; for…in1234const Arr = [ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" ];for ( index in Arr )&#123; console.log(Arr[index]);&#125; for…in 有个缺点，因为它会循环访问所有可枚举的属性，也就是说数组的原型中添加的任何属性，也会出现在循环中。123456789101112131415Array.prototype.pro = function()&#123; for(let i =0; i &lt; this.length; i++)&#123; this[i] = this[i].toFixed(2); &#125;&#125;;const Arr = [ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" ];for(const index in Arr)&#123; console.log(Arr[index])&#125;// 打印出来会多一个// ƒ ()&#123;// for(let i =0; i &lt; this.length; i++)&#123;// this[i] = this[i].toFixed(2);// &#125;// &#125; forEach 循环是另一种形式的 JavaScript 循环。但是，forEach() 实际上是数组方法，因此只能用在数组中。有人无法停止或退出forEach循环。如果你希望你的循环出现这种行为，则需要使用基本的 for 循环。 for…of 循环for…of 循环用于循环访问任何可迭代的数据类型。for…of 和 for…in 的区别在于，for…of 可以忽略索引。1234const Arr = [ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" ];for(const item of Arr)&#123; console.log(item)&#125; for…of 循环解决了 for 和 for…in 循环的不足之处。我们可以随s时退出 for..of 循环。而且还有重要的一点，for…of 不会添加添加数组的原型中的属性。123456789101112Array.prototype.pro = function()&#123; for(let i =0; i &lt; this.length; i++)&#123; this[i] = this[i].toFixed(2); &#125;&#125;;const Arr = [ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\" ];for(const item of Arr)&#123; console.log(item) if(item === \"e\")&#123; break; &#125;&#125; 拓展运算符拓展运算符（用三个连续的点（…）表示）是ES6中的新概念，使你能够将字面量对象拓展为多个元素。比如，在没有拓展运算符的时候，我们要组合多个数组，只能通过 Array 的 concat() 方法。1234const animal = [\"cat\",\"dog\",\"duck\"];const color = [\"yellow\",\"orange\",\"black\"];const all = animal.concat(color);console.log(all); 使用拓展运算符来组合数组1234const animal = [\"cat\",\"dog\",\"duck\"];const color = [\"yellow\",\"orange\",\"black\"];const all = [...animal,...color];console.log(all); 其他用途： 将变量赋值数组时123const Arr = [\"18岁\", \"xgz\", \"ball\", \"blue\", \"red\", \"black\", \"yellow\"];const [age, name, habby, ...color] = Arr;console.log(age, name, habby, color); 用在可变参数函数在没有拓展运算符之前，对于参数不固定的函数都是用参数对象 arguments 进行处理。1234567function sum(...nums)&#123; let total = 0; for (const num of nums)&#123; total += num; &#125; return total;&#125; ES6 箭头函数一个普通函数：12345const color = [\"blue\",\"orange\",\"red\"].map(function(item) &#123; return item.toUpperCase();&#125;)var sum = (num1, num2) =&gt; num1 + num2; 以下是箭头函数的写法：1234567const color = [\"blue\",\"orange\",\"red\"].map( item =&gt;&#123; item.toUpperCase&#125;);var sum = function(num1, num2) &#123; return num1 + num2;&#125;; 注： 箭头函数没有它自己的this值，箭头函数内的this值继承自外围作用域。 不可以 new 命令，即不能当构造函数。 不可以使用 arguments 对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。 12345678910// this democonst fn = &#123; array: [1, 2, 3], sum: () =&gt; &#123; console.log(this === window); // =&gt; true return this.array.reduce((result, item) =&gt; result + item); &#125;&#125;;fn.sum();// TypeError: Cannot read property 'reduce' of undefined 即 this 指向了window，而不是调用它的函数 fn。解决方法也很简单，使用函数表达式或者方法简写（ES6 中已经支持）来定义方法，这样能确保 this 是在运行时是由包含它的上下文决定的。123456789const fn = &#123; array: [1, 2, 3], sum() &#123; console.log(this === fn); // =&gt; true return this.array.reduce((result, item) =&gt; result + item); &#125;&#125;;fn.sum();// 6 原型链在原型对象上，定义函数也要遵循一样的规则。12345678910function Person(name) &#123; this.name = name;&#125;Person.prototype.sayName = () =&gt; &#123; console.log(this === window); // =&gt; true return this.name;&#125;;const ming = new Person('xiaoming');ming.sayName(); // =&gt; undefined 此时，我们需要用传统的方法去解决问题。1234567891011function Person(name) &#123; this.name = name;&#125;Person.prototype.sayName = function() &#123; console.log(this === Person); // =&gt; true return this.name;&#125;;const ming = new Person('xiaoming');ming.sayName(); // =&gt; xiaoming 还有一种情况，比如我们平时对 dom 进行日常操作，使用箭头函数会也会使 this 指向 window。12345const button = document.getElementById('myButton');button.addEventListener('click', () =&gt; &#123; console.log(this === window); // =&gt; true this.innerHTML = 'Clicked button';&#125;); 因为这个回调的箭头函数是在全局上下文被定义的，所以它的 this 是 window 。换句话说，箭头函数预定义的上下文是不能被修改的。12345const button = document.getElementById('myButton');button.addEventListener('click', function() &#123; console.log(this === button); // =&gt; true this.innerHTML = 'Clicked button';&#125;); 未完待续…","categories":[],"tags":[]},{"title":"apply和call的用法","slug":"apply和call的用法","date":"2019-03-17T15:13:22.000Z","updated":"2019-03-26T15:01:14.330Z","comments":true,"path":"2019/03/17/apply和call的用法/","link":"","permalink":"https://o0foam.github.io/2019/03/17/apply和call的用法/","excerpt":"","text":"apply和call用来调用对象本不属于他自己的方法1234567891011121314let chicken = &#123; name: \"鸡\", crow: function()&#123; console.log(\"我是\" + this.name + \"，我会喔～喔～～喔～～～\") &#125;&#125;;let duck = &#123; name: \"鸭\", swim: function()&#123; console.log(\"我是\" + this.name + \"，我会游\") &#125;&#125;;chicken.crow(); // 我是鸡，我会喔～喔～～喔～～～duck.swim(); // 我是鸭，我会游 鸡会蹄，鸭子会游泳。一天，鸡想去游泳，但是它并不会游，于是它找到了鸭，和鸭学。 通过apply和call调用12duck.swim.apply(chicken); // 我是鸡，我会游duck.swim.call(chicken); // 我是鸡，我会游 于是乎，鸡学会了游泳。但是鸭也想唱歌来增加自己的人气，它让鸡教它。12chicken.crow.apply(duck); // 我是鸭，我会喔～喔～～喔～～～chicken.crow.call(duck); // 我是鸡，我会游 于是乎，鸭也能在早上叫你起床了。 总结与区别apply和call接收的第一个参数会变成this，谁需要调用不是它的方法，就把它放在参数的第一个位置（需要调取的函数对象）。apply的第二个参数传入的是数组，而call可以传入很多个。再来看个例子:123456789101112let peTeacher = &#123; name: \"peTeacher\"&#125;;let mathTeacher = &#123; name: \"mathTeacher\", add: function(num1, num2)&#123; console.log(\"虽然我是\"+this.name+\"但是我知道结果是：\") return num1+num2; &#125;&#125;;mathTeacher.add.apply(peTeacher,[2,3]); // 虽然我是peTeacher但是我知道结果是： 5mathTeacher.add.call(peTeacher,2,3); // 虽然我是peTeacher但是我知道结果是： 5 嗯嗯～没错，他们的不同点是传入参数的方式不同。","categories":[],"tags":[]},{"title":"2019随笔","slug":"2019随笔","date":"2019-03-04T15:46:04.000Z","updated":"2019-03-11T15:07:03.559Z","comments":true,"path":"2019/03/04/2019随笔/","link":"","permalink":"https://o0foam.github.io/2019/03/04/2019随笔/","excerpt":"","text":"03-03 星期日 23:46虽然自己公司最近不忙，不用加班，但还是感觉自己的生活节奏好快，很少自己的时间。下班后回公司学东西，再健身。回到宿舍已经是9点半~在弄一下自己的事情~已经快11点。再整理一下知识，已经到了入睡的时间。今天趁着放一天假，去覔书店看了看书，又在周边走了走。竟突然发现周围的事物好新鲜，想了想，自己几乎都是呆在室内，真的很少出来见见太阳，出来走走那种。因为心不静，有事情埋在心底，也很久没有找朋友了，相机也搁角落一段时间了。希望自己可以快点把这些事情做完，把该学的学了，让心安静下来。ps:覔书店遇到的小妹妹 03-04 星期一 雨天 23:45希望能把想做的事快点做完。 03-10 星期天 雨天 23:16天光之后，会很美的。","categories":[],"tags":[{"name":"others","slug":"others","permalink":"https://o0foam.github.io/tags/others/"}]},{"title":"npm使用jQuery","slug":"npm使用jQuery","date":"2019-01-17T14:10:20.000Z","updated":"2019-01-17T14:29:28.615Z","comments":true,"path":"2019/01/17/npm使用jQuery/","link":"","permalink":"https://o0foam.github.io/2019/01/17/npm使用jQuery/","excerpt":"","text":"首先用命令行在webpack项目里面安装jQuery的依赖包1npm install jquery 检测是否安装成功1npm jquery -v 一般情况下，在webpack.base.conf.js里面添加以下代码1const webpack = require('webpack') 在webpack.base.conf.js文件里的module.exports里添加jQuery插件1234plugins:[new webpack.ProvidePlugin(&#123; $: \"jquery\", jQuery: \"jquery\"&#125;)] 最后就可以在需要的页面里引用了1import $ from 'jquery'","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://o0foam.github.io/tags/JavaScript/"}]},{"title":"cordova打包vue项目","slug":"cordova打包vue项目","date":"2019-01-16T12:08:39.000Z","updated":"2019-01-16T14:55:05.688Z","comments":true,"path":"2019/01/16/cordova打包vue项目/","link":"","permalink":"https://o0foam.github.io/2019/01/16/cordova打包vue项目/","excerpt":"","text":"打包前准备cordova环境配置JDK的配置SDK的配置cordova打包vue联机模式：在地址栏里输入 chrome://inspect/#devices 首次使用请翻墙 文件目录其中，webcode是vue的脚手架，其他是cordova的项目1.在文件夹webcode/config里找到index.js,修改对象build的参数1234567891011build: &#123; index: path.resolve(__dirname, '../../www/index.html'), assetsRoot: path.resolve(__dirname, '../../www'), assetsSubDirectory: 'static', assetsPublicPath: '', productionSourceMap: true, devtool: '#source-map', productionGzip: false, productionGzipExtensions: ['js', 'css'], bundleAnalyzerReport: process.env.npm_config_report &#125; 注意：主要改变的是index、assetsRoot、assetsSubDirectory和assetsPublicPath2.修改main.js,将 new Vue() 代码放到 deviceready 回调里面。12345678910111213141516171819202122232425if(process.env.NODE_ENV == 'development' )&#123; new Vue(&#123; el: '#app', router, components: &#123; App &#125;, template: '&lt;App/&gt;' &#125;)&#125;else&#123; // add cordova.js only if serving the app through file:// if (window.location.protocol === 'file:' || window.location.port === '3000') &#123; var cordovaScript = document.createElement('script') cordovaScript.setAttribute('type', 'text/javascript') cordovaScript.setAttribute('src', 'cordova.js') document.body.appendChild(cordovaScript) &#125; document.addEventListener('deviceready', function()&#123; console.log('当设备设备准备好的时候调用'); new Vue(&#123; el: '#app', router, components: &#123; App &#125;, template: '&lt;App/&gt;' &#125;) &#125;, false)&#125; 3.打包，在vue文件目录下打开命令行，输入1npm run build 4.让完成的项目运行在安卓设备里，需要在cordova(就是vue的上一级目录)输入命令行1cordova run android","categories":[],"tags":[{"name":"others","slug":"others","permalink":"https://o0foam.github.io/tags/others/"}]},{"title":"边框渐变色","slug":"边框渐变","date":"2019-01-14T11:27:49.000Z","updated":"2019-01-15T15:01:07.805Z","comments":true,"path":"2019/01/14/边框渐变/","link":"","permalink":"https://o0foam.github.io/2019/01/14/边框渐变/","excerpt":"","text":"渐变是我们经常要用到的样式，一般情况，只要看css3菜鸟渐变教程就可以搞定了。还有一种特殊的渐变，边框渐变。制作边框渐变的方法如下：123456789&lt;div class=\"border_gradients\"&gt;&lt;/div&gt;&lt;style&gt; .border_gradients &#123; width: 300px; height: 100px; border: 10px solid; border-image: linear-gradient( #FF6369, #637AED) 30 30; &#125;&lt;/style&gt; 运行结果： .border_gradients { width: 300px; height: 100px; border: 15px solid; border-image: linear-gradient(to right, #FF6369, #637AED) 30 30; } 在个人工作项目中，还遇到了单边框的情况，单边框的写法如下 123456789101112&lt;div class=\"border_gradientsBottom\"&gt;&lt;/div&gt;&lt;style&gt; .border_gradientsBottom &#123; width: 300px; height: 100px; border: 15px solid; border-image: linear-gradient(to right, #FF6369, #637AED) 30 30; border-right: none; border-left: none; border-top: none; &#125;&lt;/style&gt; 运行结果 .border_gradientsBottom { width: 300px; height: 100px; border: 15px solid; border-image: linear-gradient(to right, #FF6369, #637AED) 30 30; border-right: none; border-left: none; border-top: none; }","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://o0foam.github.io/tags/css/"}]},{"title":"sass的引入","slug":"sass的引入","date":"2019-01-07T15:04:39.000Z","updated":"2019-01-07T15:20:26.054Z","comments":true,"path":"2019/01/07/sass的引入/","link":"","permalink":"https://o0foam.github.io/2019/01/07/sass的引入/","excerpt":"","text":"安装sass依赖包12npm install --save-dev sass-loadernpm install --save-dev node-sass 配置webpack找到build文件夹里的webpack.base.conf.js文件，并给rules对象添加多一项配置1234&#123; test: /\\.sass$/, loaders: ['style', 'css', 'sass']&#125; 写sass在一个vue文件里面写上标签12&lt;style lang=\"scss\"&gt;&lt;/style&gt; 然后就可以开始工作了附上sass链接： sass文档","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://o0foam.github.io/tags/css/"}]},{"title":"不要再问我数组操作了","slug":"不要再问我数组操作了","date":"2019-01-03T15:43:03.000Z","updated":"2019-02-19T15:30:00.107Z","comments":true,"path":"2019/01/03/不要再问我数组操作了/","link":"","permalink":"https://o0foam.github.io/2019/01/03/不要再问我数组操作了/","excerpt":"","text":"源代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=\"http://libs.baidu.com/jquery/1.10.2/jquery.min.js\"&gt;&lt;/script&gt; &lt;style type=\"text/css\"&gt; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;button&gt;0.concat()&lt;/button&gt; &lt;button&gt;1.join()&lt;/button&gt; &lt;button&gt;2.push()&lt;/button&gt; &lt;button&gt;3.pop()&lt;/button&gt; &lt;button&gt;4.shift()&lt;/button&gt; &lt;button&gt;5.unshift()&lt;/button&gt; &lt;button&gt;6.slice()&lt;/button&gt; &lt;button&gt;7.substring() and substr() (one param)&lt;/button&gt; &lt;button&gt;8.substring() and substr() (two param)&lt;/button&gt; &lt;button&gt;9.sort()&lt;/button&gt; &lt;button&gt;10.reverse()&lt;/button&gt; &lt;button&gt;11.indexOf()&lt;/button&gt; &lt;button&gt;12.lastIndexOf&lt;/button&gt; &lt;button&gt;13.every()&lt;/button&gt; &lt;button&gt;14.some()&lt;/button&gt; &lt;button&gt;15.filter()&lt;/button&gt; &lt;button&gt;16.map()&lt;/button&gt; &lt;button&gt;17.forEach()&lt;/button&gt; &lt;br /&gt; &lt;i&gt;===============ES6================&lt;/i&gt; &lt;br /&gt; &lt;button&gt;18.find()&lt;/button&gt; &lt;button&gt;19.findIndex()&lt;/button&gt; &lt;button&gt;20.fill()&lt;/button&gt; &lt;button&gt;21.copyWithin()&lt;/button&gt; &lt;button&gt;22.from()&lt;/button&gt; &lt;button&gt;23.of()&lt;/button&gt; &lt;button&gt;24.entries()&lt;/button&gt; &lt;button&gt;25.values()&lt;/button&gt; &lt;button&gt;26.keys()&lt;/button&gt; &lt;button&gt;27.includes&lt;/button&gt; &lt;br /&gt; &lt;i&gt;===============补充的================&lt;/i&gt; &lt;br /&gt; &lt;button&gt;28.splice(0,1)&lt;/button&gt; &lt;button&gt;29.splice(1, 0, \"yellow\", \"orange\")&lt;/button&gt; &lt;button&gt;30.sploce(1, 1, \"red\", \"purple\")&lt;/button&gt; &lt;button&gt;31.reduce()&lt;/button&gt; &lt;button&gt;32.reduceRight()&lt;/button&gt; &lt;br /&gt; &lt;span&gt;I am test span.&lt;/span&gt; &lt;div&gt;I am test div.&lt;/div&gt;&lt;/body&gt;&lt;script&gt; $(document).ready(function()&#123; // concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组，仅会返回被连接数组的一个副本。 $(\"button:eq(0)\").click(function()&#123; let arr1 = [0,1,2,3,4]; let arr2 = [4,5]; let arr3 = arr1.concat(arr2); $(\"span\").text(arr3) // 0,1,2,3,4,4,5 $(\"div\").text(\"undefine\") console.log(arr3) &#125;) // join() 方法用于把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行分隔的，默认使用','号分割，不改变原数组。 $(\"button:eq(1)\").click(function()&#123; let arr = [0,1,2,3,4]; $(\"span\").text(arr.join(\"new\")) // 0new1new2new3new4 $(\"div\").text(\"undefine\") &#125;) // push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。末尾添加，返回的是长度，会改变原数组 $(\"button:eq(2)\").click(function()&#123; let arr1 = [0,1,2,3,4]; let arr2 = arr1.push(\"new\") $(\"span\").text(\"data length:\"+arr2) // data length:6 $(\"div\").text(arr1) // 0,1,2,3,4,new &#125;) // pop() 方法用于删除并返回数组的最后一个元素。返回最后一个元素，会改变原数组。 $(\"button:eq(3)\").click(function()&#123; let arr = [0,1,2,3,4]; $(\"span\").text(arr.pop()); // 4 $(\"div\").text(arr) // 0,1,2,3 &#125;) // shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。返回第一个元素，改变原数组。 $(\"button:eq(4)\").click(function()&#123; let arr = [0,1,2,3,4]; $(\"span\").text(arr.shift()) // 0 $(\"div\").text(arr) // 1,2,3,4 &#125;) // unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。返回新长度，改变原数组。 $(\"button:eq(5)\").click(function()&#123; let arr = [0,1,2,3,4]; $(\"span\").text(\"length:\"+arr.unshift(\"new\",\"xin\")); // length:7 $(\"div\").text(arr) // new,xin,0,1,2,3,4 &#125;) // slice() 返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。返回选定的元素，该方法不会修改原数组。 $(\"button:eq(6)\").click(function()&#123; let arr1 = [0,1,2,3,4]; let arr2 = arr1.slice(1,4) $(\"span\").text(arr2); // 1,2,3 $(\"div\").text(arr1) // 0,1,2,3,4 &#125;) // substring() 和 substr():如果只是写一个参数，两者的作用都一样：都是是截取字符串从当前下标以后直到字符串最后的字符串片段。第二个参数是截取字符串的长度（从起始点截取某个长度的字符串）；如果是两个参数,substring（startIndex, endIndex）： 第二个参数是截取字符串最终的下标 （截取2个位置之间的字符串,‘含头不含尾’）。 $(\"button:eq(7)\").click(function()&#123; let data = '0123456789'; $(\"span\").text(data.substring(2)); // 23456789 $(\"div\").text(data.substr(2)); // 23456789 console.log(data) // 0123456789 &#125;) $(\"button:eq(8)\").click(() =&gt; &#123; let data = '0123456789'; $(\"span\").text(data.substring(2,5)); // 234 $(\"div\").text(data.substr(2,5)); // 23456 &#125;) //sort() 按照 Unicode code 位置排序，默认升序 $(\"button:eq(9)\").click(() =&gt; &#123; let fruit = ['cherries', 'apples', 'bananas']; let scores = [1,10,2,21]; $(\"span\").text(fruit.sort()); // apples,bananas,cherries $(\"div\").text(scores.sort()+\"num can not sort\") // 1,10,2,21num can not sort &#125;) // reverse() 方法用于颠倒数组中元素的顺序。返回的是颠倒后的数组，会改变原数组。 $(\"button:eq(10)\").click(() =&gt; &#123; let arr1 = [0,1,2,3,4]; let arr2 = arr1.reverse(); $(\"span\").text(arr1); // 4,3,2,1,0 $(\"div\").text(arr2); // 4,3,2,1,0 &#125;) // indexOf() 和 lastIndexOf() 都接受两个参数：查找的值、查找起始位置不存在，返回 -1 ；存在，返回位置。indexOf 是从前往后查找， lastIndexOf 是从后往前查找。ps:有疑问!!! $(\"button:eq(11)\").click(() =&gt; &#123; let arr = [0,1,2,3,4]; $(\"span\").text(\"location:\"+arr.indexOf(3)); // location:3 $(\"div\").text(arr.indexOf(6)); // -1 &#125;) $(\"button:eq(12)\").click(() =&gt; &#123; let arr = [0,1,2,3,4]; $(\"span\").text(arr.lastIndexOf(3)); // 3 $(\"div\").text(arr.lastIndexOf(6)); // -1 &#125;) // every() 对数组的每一项都运行给定的函数，每一项都满足返回ture,否则返回 true $(\"button:eq(13)\").click(() =&gt; &#123; function fn1(element, index ,array)&#123; console.log(\"fn1\") console.log(element) console.log(index) console.log(array) return element &lt; 6; &#125; function fn2(element, index ,array)&#123; console.log(\"==============================\") console.log(\"fn2\") console.log(element) console.log(index) console.log(array) return element &lt; 5; &#125; let arr1 = [5,0,1,2,3,4]; let result1 = arr1.every(fn1); let result2 =arr1.every(fn2); $(\"span\").text(result1); // true $(\"div\").text(result2); // false &#125;) // some() 对数组的每一项都运行给定的函数，只要有一项满足条件则返回 ture $(\"button:eq(14)\").click(() =&gt; &#123; let arr = [1,2,3,4,5]; let result1 = arr.some(item =&gt; &#123; return item &gt;2 &#125;) let result2 = arr.some(item =&gt;&#123; return item &gt; 6 &#125;) $(\"span\").text(result1) // true $(\"div\").text(result2) // false &#125;) // filter() 对数组的每一项都运行给定的函数，返回 结果为 ture 的项组成的数组 $(\"button:eq(15)\").click(() =&gt;&#123; let words = [\"spray\",\"limit\",\"elite\",\"exuberant\",\"destruction\",\"present\",\"happy\"]; let longWords1 = words.filter( item =&gt; &#123; return item.length &gt; 6; &#125;) let longWords2 = words.filter( item =&gt; &#123; return item.length &lt; 6; &#125;) $(\"span\").text(\"单词长度大于6:\" + longWords1); // 单词长度大于6:exuberant,destruction,present $(\"div\").text(\"单词长度小于6:\" + longWords2); // 单词长度小于6:spray,limit,elite,happy &#125;) // map() 对数组的每一项都运行给定的函数，返回每次函数调用的结果组成一个新数组 $(\"button:eq(16)\").click(() =&gt;&#123; let arr = [1,2,3,4,5]; let result1 = arr.map(item =&gt; &#123; return item * 3 &#125;) $(\"span\").text(result1) // 3,6,9,12,15 $(\"div\").text(arr) // 1,2,3,4,5 let words = [\"spray\",\"limit\",\"elite\",\"exuberant\",\"destruction\",\"present\",\"happy\"]; let longWords1 = words.map( item =&gt; &#123; return item.length &gt; 6; &#125;) console.log(longWords1) // [false, false, false, true, true, true, false] &#125;) // forEach() 数组遍历 $(\"button:eq(17)\").click(() =&gt;&#123; let arr = [1,2,3,4,5]; const copy = []; arr.forEach(item =&gt;&#123; copy.push(item) // 1,2,3,4,5 &#125;) $(\"span\").text(copy) $(\"div\").text(\"undefine\") &#125;) // find() 传入一个回调函数，找到数组中符合当前搜索规则的第一个元素，返回它，并且终止搜索。 $(\"button:eq(18)\").click(() =&gt; &#123; let arr = [\"1\",2,3,\"4\",5]; let result = arr.find(item =&gt; &#123; return typeof item === \"number\" &#125;) $(\"span\").text(+result); // 2 $(\"div\").text(\"undefine\") &#125;) // findIndex() 传入一个回调函数，找到数组中符合当前搜索规则的第一个元素，返回它的下标，终止搜索。 $(\"button:eq(19)\").click(() =&gt; &#123; let arr = [\"1\",2,3,\"4\",5]; // 不加大括号代表在箭头函数后面直接加了return let result = arr.findIndex(item=&gt; typeof item === \"number\") $(\"span\").text(\"location:\"+result) // location:1 $(\"div\").text(\"undefine\") &#125;) // fill() 用新元素替换掉数组内的元素，可以指定替换下标范围。 $(\"button:eq(20)\").click(() =&gt; &#123; let arr1 = [1,2,3,4,5]; let arr2 = [1,2,3,4,5]; let data = \"new\"; let result1 = arr1.fill(data, 0, 3); let result2 = arr2.fill(data, 3) $(\"span\").text(result1) // new,new,new,4,5 $(\"div\").text(result2) // 1,2,3,new,new &#125;) // copyWithin() 选择数组的某个下标，从该位置开始复制数组元素，默认从0开始复制。也可以指定要复制的元素范围。 $(\"button:eq(21)\").click(() =&gt; &#123; let arr1 = [1,2,3,4,5,6,7]; // 从下标为2的元素开始，复制数组，所以3,4,5被替换成1,2 console.log(arr1.copyWithin(2)) let arr2 = [1,2,3,4,5,6,7]; // 从下标为3的元素开始，复制数组，指定复制的第一个元素下标为1，所以4, 5被替换成2,3 console.log(arr2.copyWithin(3,1)) let arr3 = [1,2,3,4,5,6,7]; // 从下表为3的元素开始，复制数组，指定复制的第一个元素下表为1，结束位置为2，所以4被替换成2 console.log(arr3.copyWithin(3,1,2)) $(\"span\").text(\"请查看控制台\"); $(\"div\").text(\"请查看控制台\"); &#125;) // from()将类似数组的对象（array-like object）和可遍历（iterable）的对象转为真正的数组 $(\"button:eq(22)\").click(() =&gt; &#123; const bar = \"abc\" $(\"span\").text(Array.from(bar)); // a,b,c $(\"div\").text(Array.from(\"123456\")) // 1,2,3,4,5,6 &#125;); // of()用于将一组值，转换为数组。这个方法的主要目的，是弥补数组构造函数 Array() 的不足。因为参数个数的不同，会导致 Array() 的行为有差异。 $(\"button:eq(23)\").click(() =&gt; &#123; let arr1 = Array(7); let arr2 = Array.of(7); $(\"span\").text(arr1); // ,,,,,, $(\"div\").text(arr2); // 7 &#125;) /***********ps: for in是遍历键名，for of是遍历键值。***********/ // entries() 返回迭代器：返回键值对 $(\"button:eq(24)\").click(() =&gt; &#123; // 数组 const arr1 = ['a','b','c']; for(let v of arr1.entries()) &#123; console.log(v) &#125;; // Set const arr2 = new Set(['a', 'b', 'c']); for(let v of arr2.entries()) &#123; console.log(v) &#125; // map const arr3 = new Map(); arr3.set('a', 'b'); arr3.set('c', 'd'); for(let v of arr3.entries()) &#123; console.log(v) &#125; $(\"span\").text(\"请查看控制台\"); $(\"div\").text(\"请查看控制台\"); &#125;) // values() 返回迭代器：返回键值对的value $(\"button:eq(25)\").click(() =&gt; &#123; // 数组 const arr1 = ['a','b','c']; for(let v of arr1.values()) &#123; console.log(v); &#125; // set const arr2 = new Set(['a','b','c']); for(let v of arr2.values()) &#123; console.log(v) &#125; const arr3 = new Map(); arr3.set('a','b'); arr3.set('c','d'); for(let v of arr3.values()) &#123; console.log(v); &#125; $(\"span\").text(\"请查看控制台\"); $(\"div\").text(\"请查看控制台\") ; &#125;) // keys() 返回迭代器：返回键值对的key $(\"button:eq(26)\").click(() =&gt; &#123; const arr1 = ['a','b','c']; for(let v of arr1.keys()) &#123; console.log(v) &#125;; const arr2 = new Set(['a','b','c']); for(let v of arr2.keys()) &#123; console.log(v) &#125;; const arr3 = new Map(); arr3.set(\"a\",\"b\"); arr3.set(\"c\",\"d\"); for(let v of arr3.keys()) &#123; console.log(v) &#125; $(\"span\").text(\"请查看控制台\"); $(\"div\").text(\"请查看控制台\"); &#125;) // includes()判断数组中是否存在该元素，参数：查找的值、起始位置，可以替换 ES5 时代的 indexOf 判断方式。indexOf 判断元素是否为 NaN，会判断错误。 $(\"button:eq(27)\").click(() =&gt; &#123; let arr = [1,2,3,4,5]; let result1 = arr.includes(2); let result2 = arr.includes(6); $(\"span\").text(result1); // true $(\"div\").text(result2); // false &#125;) // splice() // 删除:可以删除任意数量的项,只需指定 2 个参数:要删除的第一项的位置和要删除的项数。例如, splice(0,2) 会删除数组中的前两项。 // 插入:可以向指定位置插入任意数量的项,只需提供 3 个参数:起始位置、0(要删除的项数)和要插入的项。如果要插入多个项,可以再传入第四、第五,以至任意多个项。例如 ,splice(2,0,\"red\",\"green\") 会从当前数组的位置 2 开始插入字符串 \"red\" 和 \"green\" 。 // 替换:可以向指定位置插入任意数量的项,且同时删除任意数量的项,只需指定 3 个参数:起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如,splice (2,1,\"red\",\"green\") 会删除当前数组位置 2 的项,然后再从位置 2 开始插入字符串\"red\" 和 \"green\" 。 $('button:eq(28)').click(()=&gt;&#123; // 参数分别代表：要从第几项开始操作，要删除几项，要在那个位置上添加几个数组 let colors = [\"red\", \"green\", \"blue\"]; let removed = colors.splice(0,1);// 删除第一项 $('span').text(colors) // green,blue $('div').text(removed); // red,返回的数组中只包含一项 &#125;) $('button:eq(29)').click(()=&gt;&#123; // 参数分别代表：要从第几项开始操作，要删除几项，要在那个位置上添加几个数组 let colors = [\"red\", \"green\", \"blue\"]; let removed = colors.splice(0,1, \"yellow\", \"orange\");// 删除第一项，并且从位置 1 开始插入两项 $('span').text(colors) // green,yellow,orange,blue $('div').text(removed); // red &#125;) $('button:eq(30)').click(()=&gt;&#123; // 参数分别代表：要从第几项开始操作，要删除几项，要在那个位置上添加几个数组 let colors = [\"red\", \"green\", \"blue\"]; let removed = colors.splice(1, 1, \"red\", \"purple\"); $('span').text(colors) // red,red,purple,blue $('div').text(removed); // green &#125;) $('button:eq(31)').click(()=&gt;&#123; var values = [1,2,3,4,5]; var sum = values.reduce(function(prev, cur, index, array)&#123; return prev + cur; &#125;); $('span').text(sum); // 15 // 第一次执行回调函数, prev 是 1, cur 是 2。第二次, prev 是 3(1 加 2 的结果), cur 是 3(数组的第三项)。这个过程会持续到把数组中的每一项都访问一遍,最后返回结果。 &#125;) $('button:eq(32)').click(()=&gt;&#123; var values = [1,2,3,4,5]; var sum = values.reduceRight(function(prev, cur, index, array)&#123; return prev + cur; &#125;); $('span')(sum); // 15 // 在这个例子中,第一次执行回调函数, prev 是 5, cur 是 4。当然,最终结果相同,因为执行的都是简单相加的操作。 &#125;) &#125;)&lt;/script&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://o0foam.github.io/tags/JavaScript/"}]},{"title":"vuex的搭建与使用","slug":"vuex的搭建与使用","date":"2018-12-28T01:29:17.000Z","updated":"2019-01-07T15:08:46.422Z","comments":true,"path":"2018/12/28/vuex的搭建与使用/","link":"","permalink":"https://o0foam.github.io/2018/12/28/vuex的搭建与使用/","excerpt":"","text":"文件目录如下： 首先通过命令行的方式引入vuex插件：1npm install vuex --save 在router文件里找到index.js,并引入vuex1.引入vuex1import Vuex from 'vuex' 2.使用vuex1Vue.use(Vuex) 在main.js里引入进行全局引入：1import store from './vuex/store' 把vuex注入到所有子组件中12345678new Vue(&#123; i18n: i18n, router, store, // 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件 el: '#app', template: '&lt;App/&gt;', components: &#123; App &#125;,&#125;).$mount('#app') 在vuex文件夹里创建名字为store.js的文件，并在里面输入：12345678910111213141516171819import Vue from \"vue\"import Vuex from \"vuex\"export default new Vuex.Store(&#123; state: &#123; count:0 &#125;, mutations: &#123; addCount(state)&#123; state.count++ &#125;, minusCount(state)&#123; state.count-- &#125;, setCount(state, num)&#123; state.count = num &#125; &#125;&#125;) 最后vuexTest.vue里面输入12345678910111213141516171819202122232425262728293031323334&lt;template&gt; &lt;div&gt; &lt;p&gt;&#123;&#123;count&#125;&#125;&lt;/p&gt; &lt;button @click=\"add\"&gt;添加值&lt;/button&gt; &lt;button @click=\"minus\"&gt;减去值&lt;/button&gt; &lt;button @click=\"set\"&gt;设置值为100&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data()&#123; return&#123; &#125; &#125;, computed: &#123; count () &#123; return this.$store.state.count &#125; &#125;, methods: &#123; add()&#123; this.$store.commit('addCount') &#125;, minus()&#123; this.$store.commit('minusCount') &#125;, set()&#123; this.$store.commit('setCount',100) &#125; &#125;&#125;&lt;/script&gt;","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://o0foam.github.io/tags/vue/"}]},{"title":"颜色收集","slug":"颜色收集","date":"2018-12-26T10:06:26.000Z","updated":"2019-02-19T15:31:05.455Z","comments":true,"path":"2018/12/26/颜色收集/","link":"","permalink":"https://o0foam.github.io/2018/12/26/颜色收集/","excerpt":"","text":"绿色#32596D#007A37#00B050#33AB65#00AEAD#48B5B5#12C6AA#5CD1A6#7DE6C2#95F492 红色#AB1149#BD1531#D6497D#E03735#FF6369#F47E88#FF8C8C#FBBDC9 橙色#B63424#B63A24#E03735#FF5640#FB6D00#FF8C21#FFAB63#FFB978 黄色#C29D6D#E6C293#FBB318#FFCD61#FFE669#FEF592#FEF8B7 蓝色#1B8FC6#465BC2#637AED#63BDE0#7DD1F0#79E8E8#B2D7E5 紫色#6423B6#8967A6#AB83CF#C2B5FA 黑色#313130#2C353D#D8D9D9","categories":[],"tags":[{"name":"others","slug":"others","permalink":"https://o0foam.github.io/tags/others/"}]},{"title":"父组件调用子组件函数","slug":"父组件获取子组件的值","date":"2018-12-25T12:25:32.000Z","updated":"2019-01-02T14:07:13.176Z","comments":true,"path":"2018/12/25/父组件获取子组件的值/","link":"","permalink":"https://o0foam.github.io/2018/12/25/父组件获取子组件的值/","excerpt":"","text":"vue文件目录如下：在father.vue组件里输入：1234567891011121314151617&lt;template&gt; &lt;div&gt; &lt;child ref=\"fun\"&gt;&lt;/child&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import child from \"./child\"export default &#123; components:&#123; child &#125;, mounted()&#123; this.$refs.fun.childFun() console.log(this.$refs.fun.title); &#125;&#125;&lt;/script&gt; 在child.vue里面输入：1234567891011121314151617&lt;template&gt; &lt;div&gt;子组件&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data()&#123; return&#123; title: \"我是子组件的title\" &#125; &#125;, methods:&#123; childFun()&#123; console.log(\"调用成功\"); &#125; &#125;&#125;&lt;/script&gt; 运行结果： 总结：父组件调用子组件的函数首先要给组件便签一个ref的自定义属性，然后在调用时，用$refs去获取它，接着就可以获取子组件的值了。注意：使用该方法也可以调用子组件的函数","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://o0foam.github.io/tags/vue/"}]},{"title":"css发光效果","slug":"css发光效果","date":"2018-12-25T12:12:26.000Z","updated":"2019-01-03T15:42:19.850Z","comments":true,"path":"2018/12/25/css发光效果/","link":"","permalink":"https://o0foam.github.io/2018/12/25/css发光效果/","excerpt":"","text":"不是文字的时候：html部分1&lt;div class=\"circle\"&gt;&lt;/div&gt; css部分1234567.circle &#123; height: 50px; width: 50px; border-radius: 50%; background: #12c6aa; box-shadow: 0 0 30px #12c6aa; &#125; 运行结果 .circle { height: 50px; width: 50px; border-radius: 50%; background: #12c6aa; box-shadow: 0 0 30px #12c6aa; } 文字的发光发亮效果html部分1&lt;div class=\".text_light\"&gt;文字也可以发光&lt;/div&gt; css部分1234.text_light&#123; font-size: 20px; text-shadow: 0 0 15px #fff, 0 0 15px #fff, 0 0 15px #fff, 0 0 15px #fff; &#125; 注意：如果发亮效果不够，可以加个逗号，继续添加类型的样式","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://o0foam.github.io/tags/css/"}]},{"title":"css3闪烁效果","slug":"css闪烁效果","date":"2018-12-25T00:56:57.000Z","updated":"2019-01-03T15:32:58.444Z","comments":true,"path":"2018/12/25/css闪烁效果/","link":"","permalink":"https://o0foam.github.io/2018/12/25/css闪烁效果/","excerpt":"","text":"dom部分1&lt;div class=\"blink\"&gt;&lt;/div&gt; style部分1234567891011121314151617@keyframes blinking &#123; 0% &#123; opacity: 1; &#125; 50% &#123; opacity: 0; &#125; 100% &#123; opacity: 1; &#125;&#125;.blink &#123; height: 100px; width: 100px; background: #ff3; animation: blinking 0.5s infinite; &#125; 定义一个变量blinking，设置好他的时间轴，在类选择器blink里的animation设置好时间。 运行结果 @keyframes blinking { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } } .blink { height: 100px; width: 100px; background: #ff3; animation: blinking 0.5s infinite; }","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://o0foam.github.io/tags/css/"}]},{"title":"响应式布局","slug":"响应式布局","date":"2018-12-25T00:32:06.000Z","updated":"2018-12-25T15:20:02.174Z","comments":true,"path":"2018/12/25/响应式布局/","link":"","permalink":"https://o0foam.github.io/2018/12/25/响应式布局/","excerpt":"","text":"1234567891011html&#123; font-size: 100px !important; &#125;@media screen and (min-width: 1366px) and (max-width: 1919px) &#123; html &#123; font-size: 85px !important; &#125; .login_box &#123; margin-left: 8rem; &#125;&#125;","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://o0foam.github.io/tags/css/"}]},{"title":"vue2.0同级组件的通信方法","slug":"vue2-0同级组件的通信","date":"2018-12-20T12:02:27.000Z","updated":"2018-12-28T14:16:57.123Z","comments":true,"path":"2018/12/20/vue2-0同级组件的通信/","link":"","permalink":"https://o0foam.github.io/2018/12/20/vue2-0同级组件的通信/","excerpt":"","text":"vue父子组件之间可以通过props和$emit进行通信，但是同级组件的通信会麻烦一点（不用vuex），以下是同级组件的通信方法。 目录结构： 在comunicate.js里面输入12import Vue from \"vue\";export default new Vue; 该步骤的目的是为了实例化一个新的vue，让childOne.vue和childTwo.vue通过comunicate这个中介，能访问到同一个‘变量’。 在father.vue里面输入1234567891011121314151617181920212223242526&lt;template&gt; &lt;div class=\"father\"&gt; &lt;div&gt; &lt;p&gt;我是父组件&lt;/p&gt; &lt;child-one&gt;&lt;/child-one&gt; &lt;child-two&gt;&lt;/child-two&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import childOne from \"./childOne\"import childTwo from \"./childTwo\"export default &#123; components: &#123; childOne, childTwo &#125;&#125;&lt;/script&gt;&lt;style&gt;.father&#123; width: 500px; height: 500px; background: aquamarine;&#125;&lt;/style&gt; 在childOne.vue里面输入12345678910111213141516171819202122232425&lt;template&gt; &lt;div class=\"childone\" @click=\"childoneFun\"&gt; &lt;p&gt;childone&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import comunicate from \"./comunicate\";export default &#123; methods:&#123; childoneFun()&#123; comunicate.$emit(\"one\", \"我是从childone传过来的\"); &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;.childone&#123; float: left; width: 100px; height: 100px; background: cornflowerblue;&#125;&lt;/style&gt; 用$emit进行发送信号 在childTwo.vue里面输入1234567891011121314151617181920212223242526272829303132&lt;template&gt; &lt;div class=\"childtwo\"&gt; &lt;p&gt;childtwo&lt;/p&gt; &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import comunicate from \"./comunicate\";export default &#123; data()&#123; return&#123; msg: \"注意我的值\" &#125; &#125;, mounted()&#123; const vm = this; comunicate.$on(\"one\",function(msg)&#123; vm.msg = msg; &#125;) &#125; &#125;&lt;/script&gt;&lt;style&gt;.childtwo&#123; float: right; width: 100px; height: 100px; background: salmon;&#125;&lt;/style&gt; 运行结果 总结用$on进行接受信号，因为他们都在同一个vue实例（即comunicate）里面，所以能进行信息交流，要注意的是childTwo里的const vm = this;是绝对不能少的","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://o0foam.github.io/tags/vue/"}]},{"title":"import引入文件方法","slug":"import引入文件方法","date":"2018-12-19T11:41:21.000Z","updated":"2018-12-20T14:28:21.429Z","comments":true,"path":"2018/12/19/import引入文件方法/","link":"","permalink":"https://o0foam.github.io/2018/12/19/import引入文件方法/","excerpt":"","text":"import引入css:1@import url(\"../static/css/index_section.css\"); import引入noude_modules的插件:1import VueI18n from 'vue-i18n' import引入单个对象：（用export defailt只能抛出一个对象，但可以在其他页面里自定义这个对象的名字）在需要抛出的js文件里面写入(fun是函数)1234function fun()&#123; console.log(\"我是fun函数\")&#125;export default fun; 在另外一个js文件里面引入： 此时可以给该函数自定义一个名字1import templates from './templates'; import引入多个对象：在需要抛出的js文件里面写入(init和buildMenus是函数)12345function init()&#123; console.log(\"我是init函数\")&#125;const obj1 = \"我是常量obj1\"export &#123; init, obj1 &#125;; 在另外一个js文件里面引入： 不能自定义一个名字1import &#123; init, obj1 &#125; from './文件名';","categories":[],"tags":[{"name":"others","slug":"others","permalink":"https://o0foam.github.io/tags/others/"}]},{"title":"前端知识网页","slug":"前端知识网页","date":"2018-12-17T12:19:07.000Z","updated":"2019-03-24T14:34:01.550Z","comments":true,"path":"2018/12/17/前端知识网页/","link":"","permalink":"https://o0foam.github.io/2018/12/17/前端知识网页/","excerpt":"","text":"css 详解css的Flex布局 CSS 列表项布局技巧 用 CSS 实现一个宽高等比自适应容器 css选择器 sass文档 随机颜色Javascript 理解跨域及常用解决方案 编写可维护的JS webpack中文文档 javascript动画库 Animate.cssothers git简易指南 仪表盘","categories":[],"tags":[{"name":"others","slug":"others","permalink":"https://o0foam.github.io/tags/others/"}]},{"title":"实用工具","slug":"实用工具","date":"2018-12-17T11:20:37.000Z","updated":"2019-03-28T14:27:56.444Z","comments":true,"path":"2018/12/17/实用工具/","link":"","permalink":"https://o0foam.github.io/2018/12/17/实用工具/","excerpt":"","text":"others 图片无损压缩 低多边形制作 前端搜索引擎 PS网页版 生成RESTful Web API文档 打字练习网站 PDF转换工具 GIMP(轻量修图软件) 热键神器 Dism++(垃圾清理工具) QuickLook(快速预览工具) 搜图网站 站酷 千图网 觅元素免扣素材 pixabay 苹果手机有这款网址的APP哦 alpha 图片搜索引擎 librestock 需翻墙不然打开很慢 unsplash 立体几何风 脑洞大开的设计师 游戏CG 美食 下载无法保存的图片 直接复制图片所在网页链接进去即可，点击Download就会自动下载。 吸收成熟的颜色–怪兽 提高审美 需要翻墙 手机及各种电子设备 图标 熊猫 阿里巴巴矢量图标图库 LOGO 配色 配色–渐变色 coolhue渐变色 webgradients渐变色 水滴 peise配色方法 扁平化开源插画 设计风格","categories":[],"tags":[{"name":"others","slug":"others","permalink":"https://o0foam.github.io/tags/others/"}]},{"title":"vue组件化开发","slug":"vue组件化开发","date":"2018-12-17T00:40:05.000Z","updated":"2018-12-20T14:28:31.109Z","comments":true,"path":"2018/12/17/vue组件化开发/","link":"","permalink":"https://o0foam.github.io/2018/12/17/vue组件化开发/","excerpt":"","text":"文件目录：其中index.vue为父组件，v-common为子组件记得先配置好路由 组件引入步骤：1.在父组件的script里面用import引入1import vCommon from \"./v-common\" 2.用components注册该组件1components: &#123; vCommon &#125; 3.template标签里面写1&lt;v-common&gt;&lt;v-common/&gt; 引入完成注意:也可以写成1&lt;v-common/&gt; 通过Props向子组件传递数据1.在index.vue里的data(){}里面输入一个对象1234try_data: &#123; id: 1, text: \"我是从父组件里传过来的参数\"&#125; 并且把该对象信息‘发送’给其子组件1&lt;v-common :indexData=try_data&gt;&lt;/v-common&gt; 2.在子组件v-common里面接收，即(是写在data外面，理解成独立的一个钩子函数)1props:['indexData'], 输出即可123456&lt;template&gt; &lt;div class=\"table_box\"&gt; &lt;div&gt;id:&#123;&#123;indexData.id&#125;&#125;&lt;/div&gt; &lt;div&gt;text:&#123;&#123;indexData.text&#125;&#125;&lt;/div&gt; &lt;/div&gt;&lt;/template&gt; 通过事件向父级组件发送消息发送信息的方式有两种： 方法1：1.在子组件里输入1&lt;button @click=\"$emit('sonDown','子组件传过来的参数')\"&gt;子组件button&lt;/button&gt; 如果不用传参只需输入1&lt;button @click=\"$emit('sonDown')\"&gt;子组件 2.在父组件接收该信号：1&lt;v-common @sonDown=\"test\"&gt;&lt;/v-common&gt; 在父组件methods钩子函数里面输入：123test(data)&#123; console.log(data || '触发了但是没有传参');&#125; 方法2：1.在子组件里输入1&lt;button button @click=\"sonClick\"&gt;子组件button&lt;/button&gt; 2.methods钩子函数里面输入：123sonClick()&#123; this.$emit(\"sonDown\", \"我也是子组件传过来的参数\")&#125;, 剩下的，和方法1的步骤2一样 select控件向父组件发送信息1.在子组件data(){}里输入1234567891011121314151617181920212223currentValue: 1,select:[ &#123; option:'我是option1', id: 1, &#125;, &#123; option:'我是option2', id: 2, &#125;, &#123; option:'我是option3', id: 3, &#125;, &#123; option:'我是option4', id: 4, &#125;, &#123; option:'我是option5', id: 5, &#125;] 用watch去监听currentValue对象：123456watch: &#123; currentValue(value)&#123; console.log('子组件',this.currentValue); console.log('子组件',value); &#125;&#125; 2.子组件的template部分123&lt;select v-model=\"currentValue\" @change=\"changeValue\"&gt; &lt;option v-for=\"item in select\" :value=\"item.id\" :key=\"item.id\"&gt;&#123;&#123;item.option&#125;&#125;&lt;/option&gt;&lt;/select&gt; 3.在子组件的添加函数123changeValue () &#123; this.$emit(\"change\", this.currentValue);&#125; 4.在父组件里接收1&lt;v-common @change=\"changeProvince\"&gt;&lt;/v-common&gt; 123changeProvince(val)&#123; console.log('父组件',val);&#125;","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://o0foam.github.io/tags/vue/"}]},{"title":"git操作","slug":"git操作","date":"2018-12-14T11:43:09.000Z","updated":"2018-12-25T15:19:30.061Z","comments":true,"path":"2018/12/14/git操作/","link":"","permalink":"https://o0foam.github.io/2018/12/14/git操作/","excerpt":"","text":"首次提交1234567git initgit statusgit remote add origin http://192.168.1.227/xgz/bmctrl-en.gitgit add *git statusgit commit-m &apos;首次提交&apos;git push -u origin master git master让其他人开发你的项目 在git lap里面选择一个项目 点击左侧的settings 点击左侧的members 点击右侧的绿色按钮 add members 在people里选择一个人 在 product access 选择 developer(开发者的意思) 在点击 add users to project 把主分支的项目拉下来12git pullgit merge origin/master 日常提交1234git statusgit add --allgit commit -m &quot;提交的内容&quot;git push 合并请求 git，在vscode里上传代码相当于git add 一个文件相当于git commit再点推送到，选一个网址，最后输入你git的账号和密码（如果是ssh方式就不用输入） 其他","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://o0foam.github.io/tags/git/"}]},{"title":"vs-code插件整理","slug":"vs-code插件整理","date":"2018-12-14T00:54:28.000Z","updated":"2019-03-31T14:55:11.593Z","comments":true,"path":"2018/12/14/vs-code插件整理/","link":"","permalink":"https://o0foam.github.io/2018/12/14/vs-code插件整理/","excerpt":"","text":"自动匹配tag1Auto Rename Tag 匹配括号1Bracket Pair Colorizer 中文语言包1Chinese (Simplified) Language Pack for Visual Studio Code 吸血鬼主题1Dracula Official 代码规范1ESLint 图片预览1Image preview ES6代码片段1JavaScript (ES6) code snippets markdown语法预览1Markdown Preview Enhanced 格式化1Prettier - Code formatter 检查多余空格1Trailing Spaces vue代码格式1Vetur vue代码片段1VueHelper 英文单词拼写检查1Code Spell Checker 在标签外部添加其他标签1vscode-htmltagwrap css快捷提示（消耗性能）1IntelliSense for CSS class names in HTML 快速搭建服务器1Live Server 使用字体：”Droid Sans Mono” ,Consolas, ‘Courier New’,’等线’,monospace","categories":[],"tags":[{"name":"others","slug":"others","permalink":"https://o0foam.github.io/tags/others/"}]},{"title":"vue添加i18n","slug":"vue添加i18n","date":"2018-12-12T11:42:31.000Z","updated":"2018-12-18T15:11:50.941Z","comments":true,"path":"2018/12/12/vue添加i18n/","link":"","permalink":"https://o0foam.github.io/2018/12/12/vue添加i18n/","excerpt":"","text":"1.首先在vue-cli里面用命令行引入i18n1npm install vue-i18n 2.新建文件夹lang，然后在里面创建en-US.js、zh-CN.js还有language.js，图片如下3.在main.js里面引入vue-i18n插件1import VueI18n from 'vue-i18n' 4.再通过插件形式进行挂载1Vue.use(VueI18n) 5.语言标识，之后通过this.$i18n.locale进行语言切换。1234const i18n = new VueI18n(&#123; locale: \"cn\", messages: language&#125;) 6.在vue项目里面注入1234567new Vue(&#123; el: '#app', i18n, router, components: &#123; App &#125;, template: '&lt;App/&gt;'&#125;) 7.在en-US.js里面写入123456789const en = &#123; music: 'Music',//网易云音乐 findMusic: 'Find Music',//发现音乐 myMusic: 'My Music',//我的音乐 friend: 'Friend',//朋友 musician: 'Musician',//音乐人 download: 'Download'//下载客户端&#125;export default en; 8.在文件zh-CN.js输入123456789const cn = &#123; music: '网易云音乐', findMusic: '发现音乐', myMusic: '我的音乐', friend: '朋友', musician: '音乐人', download: '下载客户端'&#125;export default cn; 9.在文件language.js输入1234567import en from './en-US'import cn from './zh-CN'const languagePack = &#123; en,cn&#125;export default languagePack; 10.在helloWorld.vue里面输入12345678910111213141516171819202122232425262728293031323334353637&lt;template&gt; &lt;div class=\"hello\"&gt; &lt;p&gt;&#123;&#123;$t('music')&#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123;$t('findMusic')&#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123;$t('myMusic')&#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123;$t('friend')&#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123;$t('musician')&#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123;$t('download')&#125;&#125;&lt;/p&gt; &lt;div&gt; &lt;button @click=\"lang_cn('cn')\"&gt;中文&lt;/button&gt; &lt;button @click=\"lang_en('en')\"&gt;英文&lt;/button&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return&#123;&#125; &#125;, methods: &#123; lang_cn(lang)&#123; console.log(lang) this.$i18n.locale = lang; &#125;, lang_en(lang)&#123; console.log(lang) this.$i18n.locale = lang; &#125; &#125;,&#125;&lt;/script&gt;&lt;style&gt;p &#123; line-height: 20px;&#125;&lt;/style&gt; 大工告成！！！","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://o0foam.github.io/tags/vue/"}]},{"title":"简单vue路由配置","slug":"简单vue路由配置","date":"2018-12-10T11:44:56.000Z","updated":"2018-12-18T15:14:33.659Z","comments":true,"path":"2018/12/10/简单vue路由配置/","link":"","permalink":"https://o0foam.github.io/2018/12/10/简单vue路由配置/","excerpt":"","text":"vue路由默认为Hash模式，可以在routes上添加一个对象1mode: 'history', 来去掉‘#’号 方法11.在components里创建一个名为 testFile.vue 文件2.打开router里面的index.js，用import引入文件(tttFile是一个变量名)1import tttFile from '@/components/testFile' 3.在数组routes里面添加对象12345&#123; path: '/tFile', name: 'ttFile', component: tttFile&#125; path是地址路径 name可以运用在命名路由 component的对象必须是引入的变量名 方法2打开router里面的index.js，直接在routes添加对象12345&#123; path: '/tFile', name: 'ttFile', component: require('@/components/testFile').default&#125;","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://o0foam.github.io/tags/vue/"}]},{"title":"vue-cli2.0搭建过程","slug":"vue-cli2.0搭建过程","date":"2018-12-10T11:07:57.000Z","updated":"2018-12-18T15:11:17.699Z","comments":true,"path":"2018/12/10/vue-cli2.0搭建过程/","link":"","permalink":"https://o0foam.github.io/2018/12/10/vue-cli2.0搭建过程/","excerpt":"","text":"搭建vue环境：1.打开命令行并输入指令1npm install -g vue-cli 2.进入你的文件夹,继续用命令行输入（注：project-name为项目名称）1vue init webpack project-name 3.命令行输完后会跳出一些简单的vue配置参数，可以按照以下格式进行配置：123456789101112131415&lt;!-- 你的项目title --&gt;project name xxx&lt;!-- 默认就可以 --&gt;project description&lt;!-- 作者名 --&gt;author&lt;!-- 默认就可以 --&gt;vue build&lt;!-- 是否要创建路由路由 --&gt;install vue-router? yes&lt;!-- 是否要使用Eslint --&gt;use Eslint to lint your code? noset up unit tests nosetup e2e tests with Nightwatch? noshould we run &apos;npm install&apos; for you after the project has been created? npm 截图如下：4.cd 到你的目录，输入命令行1npm i 等依赖下载完成后，输入1npm run dev 完成运行","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"https://o0foam.github.io/tags/vue/"}]},{"title":"边框透明度问题","slug":"边框透明度问题","date":"2018-12-07T10:02:27.000Z","updated":"2019-01-03T15:30:15.642Z","comments":true,"path":"2018/12/07/边框透明度问题/","link":"","permalink":"https://o0foam.github.io/2018/12/07/边框透明度问题/","excerpt":"","text":"边框也可以制作透明样式，只是要加一个 background-clip: padding-box; 的样式才能实现 html部分123&lt;div class=\"box\"&gt; out &lt;div class=\"paddingBox\"&gt; in &lt;/div&gt;&lt;/div&gt; css部分1234567891011121314.box &#123; font-size: 30px; background: #12c6aa; height: 300px; width: 300px;&#125;.paddingBox &#123; border: 12px solid rgba(255, 255, 255, 0.6); height: 200px; width: 200px; background-color: #def0ff; border-radius: 6px; background-clip: padding-box;&#125; 运行结果 out in .box { font-size: 30px; background: #12c6aa; height: 300px; width: 300px; } .paddingBox { border: 12px solid rgba(255, 255, 255, 0.6); height: 200px; width: 200px; background-color: #def0ff; border-radius: 6px; background-clip: padding-box; }","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://o0foam.github.io/tags/css/"}]},{"title":"markdown语法","slug":"markdown语法 ","date":"2018-12-06T15:01:01.000Z","updated":"2019-02-19T15:31:38.518Z","comments":true,"path":"2018/12/06/markdown语法 /","link":"","permalink":"https://o0foam.github.io/2018/12/06/markdown语法 /","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题** 要加粗的文字左右分别用两个*号包起来 ***要倾斜的文字左右分别用一个*号包起来****要倾斜和加粗的文字左右分别用三个*号包起来***~~要加删除线的文字左右分别用两个~号包起来~~&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;这是引用的内容分割线用三个或者三个以上的 - 或者 * 都可以。---***![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加。如果用hexo博客引入文件，图片地址要用绝对路径，/img/图片.jpg，其中img文件夹在sourcce目录里面。[超链接名](超链接地址 &quot;超链接title&quot;)title可加可不加无序列表用 - + * 任何一种都可以- 列表内容+ 列表内容* 列表内容有序列表 数字加点1. 列表内容2. 列表内容3. 列表内容表格姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略代码块(``` javascript) 代码... 代码... 代码...(```)注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。&lt;font color=#0099ff size=7&gt;color=#0099ff size=72 face=&quot;有颜色的字体&quot;&lt;/font&gt;&lt;font color=#00ffff size=72&gt;color=#00ffff&lt;/font&gt;&lt;font color=gray size=72&gt;color=gray&lt;/font&gt;Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3。&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#7FFFD4&gt;这里的背景色是：Aquamarine， 十六进制颜色值：#7FFFD4， rgb(127, 255, 212)&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 这里的背景色是：Aquamarine， 十六进制颜色值：#7FFFD4， rgb(127, 255, 212) color=#0099ff size=72 face=”有颜色的字体” color=#00ffff color=gray百度 姓名 技能 排行d 刘备 哭 大哥 关羽 打 二哥 张飞 骂 三弟 1234function fun()&#123; console.log(\"这是一句非常牛d逼的代码\");&#125;fun();","categories":[],"tags":[{"name":"others","slug":"others","permalink":"https://o0foam.github.io/tags/others/"}]}]}